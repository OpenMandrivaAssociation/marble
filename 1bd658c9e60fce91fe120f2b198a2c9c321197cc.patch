From 1bd658c9e60fce91fe120f2b198a2c9c321197cc Mon Sep 17 00:00:00 2001
From: Gilles Caulier <caulier.gilles@gmail.com>
Date: Tue, 31 Oct 2023 11:54:09 +0100
Subject: [PATCH] Fix broken compilation with Qt6.6 and MSVC2022 under Windows
 10.

MSVC is not able to build the hash-table of class where the key is not fully defined previously. All function to play the hash-tables are now hosted in a dedicated container outside OsmPlacemarkData.

The previous code compiled fine with MSVC2019 (and also G++ or Clang). Sounds like a new restriction introduced in the new Microsoft compiler.

CCBUGS: 398582
---
 src/lib/marble/osm/OsmPlacemarkData.cpp | 119 +++++++++++++-----------
 src/lib/marble/osm/OsmPlacemarkData.h   |  87 ++++++++++++-----
 src/plugins/runner/osm/OsmWay.cpp       |   4 +-
 3 files changed, 128 insertions(+), 82 deletions(-)

diff --git a/src/lib/marble/osm/OsmPlacemarkData.cpp b/src/lib/marble/osm/OsmPlacemarkData.cpp
index 4997c2cda7..58e60011ff 100644
--- a/src/lib/marble/osm/OsmPlacemarkData.cpp
+++ b/src/lib/marble/osm/OsmPlacemarkData.cpp
@@ -20,11 +20,22 @@ inline uint qHash(Marble::OsmIdentifier ident, uint seed)
 }
 
 OsmPlacemarkData::OsmPlacemarkData():
-    m_id( 0 )
+    m_id( 0 ),
+	m_href(new OsmPlacemarkDataHashRef)
 {
     // nothing to do
 }
 
+OsmPlacemarkData::~OsmPlacemarkData()
+{
+	delete m_href;
+}
+
+OsmPlacemarkDataHashRef* OsmPlacemarkData::hRef() const
+{
+	return m_href;
+}
+
 qint64 OsmPlacemarkData::id() const
 {
     return m_id;
@@ -111,8 +122,6 @@ void OsmPlacemarkData::setAction( const QString& action )
     m_tags[QStringLiteral("mx:action")] = action;
 }
 
-
-
 QString OsmPlacemarkData::tagValue( const QString& key ) const
 {
     return m_tags.value( key );
@@ -154,71 +163,50 @@ QHash< QString, QString >::const_iterator OsmPlacemarkData::tagsEnd() const
     return m_tags.constEnd();
 }
 
-
-
-
-
 OsmPlacemarkData &OsmPlacemarkData::nodeReference( const GeoDataCoordinates &coordinates )
 {
-    return m_nodeReferences[ coordinates ];
+    return m_href->m_nodeReferences[ coordinates ];
 }
 
 OsmPlacemarkData OsmPlacemarkData::nodeReference( const GeoDataCoordinates &coordinates ) const
 {
-    return m_nodeReferences.value( coordinates );
+    return m_href->m_nodeReferences.value( coordinates );
 }
 
 void OsmPlacemarkData::addNodeReference( const GeoDataCoordinates &key, const OsmPlacemarkData &value )
 {
-    m_nodeReferences.insert( key, value );
+    m_href->m_nodeReferences.insert( key, value );
 }
 
 void OsmPlacemarkData::removeNodeReference( const GeoDataCoordinates &key )
 {
-    m_nodeReferences.remove( key );
+    m_href->m_nodeReferences.remove( key );
 }
 
 bool OsmPlacemarkData::containsNodeReference( const GeoDataCoordinates &key ) const
 {
-    return m_nodeReferences.contains( key );
+    return m_href->m_nodeReferences.contains( key );
 }
 
 void OsmPlacemarkData::changeNodeReference( const GeoDataCoordinates &oldKey, const GeoDataCoordinates &newKey )
 {
-    m_nodeReferences.insert( newKey, m_nodeReferences.value( oldKey ) );
-    m_nodeReferences.remove( oldKey );
-}
-
-QHash<GeoDataCoordinates, OsmPlacemarkData> &OsmPlacemarkData::nodeReferences()
-{
-    return m_nodeReferences;
+    m_href->m_nodeReferences.insert( newKey, m_href->m_nodeReferences.value( oldKey ) );
+    m_href->m_nodeReferences.remove( oldKey );
 }
 
-QHash< GeoDataCoordinates, OsmPlacemarkData >::const_iterator OsmPlacemarkData::nodeReferencesBegin() const
-{
-    return m_nodeReferences.begin();
-}
-
-QHash< GeoDataCoordinates, OsmPlacemarkData >::const_iterator OsmPlacemarkData::nodeReferencesEnd() const
-{
-    return m_nodeReferences.constEnd();
-}
-
-
 OsmPlacemarkData &OsmPlacemarkData::memberReference( int key )
 {
-    return m_memberReferences[ key ];
+    return m_href->m_memberReferences[ key ];
 }
 
 OsmPlacemarkData OsmPlacemarkData::memberReference( int key ) const
 {
-    return m_memberReferences.value( key );
+    return m_href->m_memberReferences.value( key );
 }
 
-
 void OsmPlacemarkData::addMemberReference( int key, const OsmPlacemarkData &value )
 {
-    m_memberReferences.insert( key, value );
+    m_href->m_memberReferences.insert( key, value );
 }
 
 void OsmPlacemarkData::removeMemberReference( int key )
@@ -226,8 +214,8 @@ void OsmPlacemarkData::removeMemberReference( int key )
     // If an inner boundary is deleted, all indexes higher than the deleted one
     // must be lowered by 1 to keep order.
     QHash< int, OsmPlacemarkData > newHash;
-    QHash< int, OsmPlacemarkData >::iterator it = m_memberReferences.begin();
-    QHash< int, OsmPlacemarkData >::iterator end = m_memberReferences.end();
+    QHash< int, OsmPlacemarkData >::iterator it = m_href->m_memberReferences.begin();
+    QHash< int, OsmPlacemarkData >::iterator end = m_href->m_memberReferences.end();
 
     for ( ; it != end; ++it ) {
         if ( it.key() > key ) {
@@ -237,27 +225,12 @@ void OsmPlacemarkData::removeMemberReference( int key )
             newHash.insert( it.key(), it.value() );
         }
     }
-    m_memberReferences = newHash;
+    m_href->m_memberReferences = newHash;
 }
 
 bool OsmPlacemarkData::containsMemberReference( int key ) const
 {
-    return m_memberReferences.contains( key );
-}
-
-QHash<int, OsmPlacemarkData> &OsmPlacemarkData::memberReferences()
-{
-    return m_memberReferences;
-}
-
-QHash< int, OsmPlacemarkData >::const_iterator OsmPlacemarkData::memberReferencesBegin() const
-{
-    return m_memberReferences.begin();
-}
-
-QHash< int, OsmPlacemarkData >::const_iterator OsmPlacemarkData::memberReferencesEnd() const
-{
-    return m_memberReferences.constEnd();
+    return m_href->m_memberReferences.contains( key );
 }
 
 void OsmPlacemarkData::addRelation( qint64 id, OsmType type, const QString &role )
@@ -301,8 +274,8 @@ bool OsmPlacemarkData::isNull() const
 bool OsmPlacemarkData::isEmpty() const
 {
     return m_tags.isEmpty() &&
-            m_nodeReferences.isEmpty() &&
-            m_memberReferences.isEmpty() &&
+            m_href->m_nodeReferences.isEmpty() &&
+            m_href->m_memberReferences.isEmpty() &&
             m_relationReferences.isEmpty();
 }
 
@@ -325,4 +298,40 @@ const char *OsmPlacemarkData::nodeType() const
     return "OsmPlacemarkDataType";
 }
 
+// ---------------------------------------------------------------------------------------------------------
+
+OsmPlacemarkDataHashRef::OsmPlacemarkDataHashRef()
+{
+}
+
+QHash<GeoDataCoordinates, OsmPlacemarkData> &OsmPlacemarkDataHashRef::nodeReferences()
+{
+    return m_nodeReferences;
+}
+
+QHash< GeoDataCoordinates, OsmPlacemarkData >::const_iterator OsmPlacemarkDataHashRef::nodeReferencesBegin() const
+{
+    return m_nodeReferences.begin();
+}
+
+QHash< GeoDataCoordinates, OsmPlacemarkData >::const_iterator OsmPlacemarkDataHashRef::nodeReferencesEnd() const
+{
+    return m_nodeReferences.constEnd();
+}
+
+QHash<int, OsmPlacemarkData> &OsmPlacemarkDataHashRef::memberReferences()
+{
+    return m_memberReferences;
+}
+
+QHash< int, OsmPlacemarkData >::const_iterator OsmPlacemarkDataHashRef::memberReferencesBegin() const
+{
+    return m_memberReferences.begin();
+}
+
+QHash< int, OsmPlacemarkData >::const_iterator OsmPlacemarkDataHashRef::memberReferencesEnd() const
+{
+    return m_memberReferences.constEnd();
+}
+
 }
diff --git a/src/lib/marble/osm/OsmPlacemarkData.h b/src/lib/marble/osm/OsmPlacemarkData.h
index a9543bf748..b12bb79b9e 100644
--- a/src/lib/marble/osm/OsmPlacemarkData.h
+++ b/src/lib/marble/osm/OsmPlacemarkData.h
@@ -13,8 +13,8 @@
 
 // Marble
 #include "GeoDataCoordinates.h"
-#include <marble_export.h>
 #include "GeoDocument.h"
+#include <marble_export.h>
 
 class QXmlStreamAttributes;
 
@@ -42,6 +42,9 @@ struct OsmIdentifier {
     inline bool operator==(OsmIdentifier other) const { return id == other.id && type == other.type; }
 };
 
+/** Forward declaration */
+class OsmPlacemarkDataHashRef;
+
 /**
  * This class is used to encapsulate the osm data fields kept within a placemark's extendedData.
  * It stores OSM server generated data: id, version, changeset, uid, visible, user, timestamp;
@@ -67,7 +70,9 @@ class MARBLE_EXPORT OsmPlacemarkData: public GeoNode
 {
 
 public:
+
     OsmPlacemarkData();
+	virtual ~OsmPlacemarkData();
 
     qint64 id() const;
     qint64 oid() const;
@@ -89,7 +94,6 @@ public:
     void setTimestamp( const QString& timestamp );
     void setAction( const QString& action );
 
-
     /**
      * @brief tagValue returns the value of the tag that has @p key as key
      * or an empty qstring if there is no such tag
@@ -132,7 +136,6 @@ public:
     QHash< QString, QString >::const_iterator tagsBegin() const;
     QHash< QString, QString >::const_iterator tagsEnd() const;
 
-
     /**
      * @brief this function returns the osmData associated with a nd
      */
@@ -155,15 +158,6 @@ public:
      */
     void changeNodeReference( const GeoDataCoordinates& oldKey, const GeoDataCoordinates &newKey );
 
-    /**
-     * @brief iterators for the reference hashes.
-     */
-    QHash< GeoDataCoordinates, OsmPlacemarkData > & nodeReferences();
-    QHash< GeoDataCoordinates, OsmPlacemarkData >::const_iterator nodeReferencesBegin() const;
-    QHash< GeoDataCoordinates, OsmPlacemarkData >::const_iterator nodeReferencesEnd() const;
-
-
-
     /**
      * @brief this function returns the osmData associated with a member boundary's index
      * -1 represents the outer boundary of a polygon, and 0,1,2... the inner boundaries,
@@ -182,10 +176,6 @@ public:
     void removeMemberReference( int key );
     bool containsMemberReference( int key ) const;
 
-    QHash< int, OsmPlacemarkData > & memberReferences();
-    QHash< int, OsmPlacemarkData >::const_iterator memberReferencesBegin() const;
-    QHash< int, OsmPlacemarkData >::const_iterator memberReferencesEnd() const;
-
     /**
      * @brief addRelation calling this makes the osm placemark a member of the relation
      * with @p id as id, while having the role @p role
@@ -215,10 +205,66 @@ public:
      */
     static OsmPlacemarkData fromParserAttributes( const QXmlStreamAttributes &attributes );
 
+	/**
+	 * Return the insternal instance of the hash-table functions container.
+	 */
+	OsmPlacemarkDataHashRef* hRef() const;
+
 private:
+
     qint64 m_id;
     QHash<QString, QString> m_tags;
 
+    /**
+     * @brief m_relationReferences is used to store the relations the placemark is part of
+     * and the role it has within them.
+     * Eg. an entry ( "123", "stop" ) means that the parent placemark is a member of
+     * the relation with id "123", while having the "stop" role
+     */
+    QHash<OsmIdentifier, QString> m_relationReferences;
+
+	/**
+	 * Store the insternal instance of the hash-table functions container.
+	 */
+	OsmPlacemarkDataHashRef* m_href = nullptr;
+};
+
+/**
+ * Container to host hash-table functions with OsmPlacemarkData as values.
+ * This container is necessary with Qt 6.6 under MSVC 2022 as compiler refuse to build 
+ * a QHash of a not fully defined class as value.
+ *
+ * E:\dk\x64-windows\include\Qt6\QtCore/qhash.h(76,7): error C2079: 'QHashPrivate::Node<Key,T>::value' uses undefined class 'Marble::OsmPlacemarkData' [C:\Users\gilles\Documents\marble\build.vcpkg\src\lib\marble\marblewidget.vcxproj]
+ *          with
+ *         [
+ *             Key=Marble::GeoDataCoordinates,
+ *             T=Marble::OsmPlacemarkData
+ *         ]
+ * E:\dk\x64-windows\include\Qt6\QtCore/qhash.h(858,1): message : see reference to class template instantiation 'QHashPrivate::Node<Key,T>' being compiled [C:\Users\gilles\Documents\marble\build.vcpkg\src\lib\marble\marblewidget.vcxproj]
+ *         with
+ *         [
+ *             Key=Marble::GeoDataCoordinates,
+ *             T=Marble::OsmPlacemarkData
+ *         ]
+ *
+ */
+class MARBLE_EXPORT OsmPlacemarkDataHashRef
+{
+public:
+
+    OsmPlacemarkDataHashRef();
+	
+    /**
+     * @brief iterators for the reference hashes.
+     */
+    QHash< GeoDataCoordinates, OsmPlacemarkData > & nodeReferences();
+    QHash< GeoDataCoordinates, OsmPlacemarkData >::const_iterator nodeReferencesBegin() const;
+    QHash< GeoDataCoordinates, OsmPlacemarkData >::const_iterator nodeReferencesEnd() const;
+
+    QHash< int, OsmPlacemarkData > & memberReferences();
+    QHash< int, OsmPlacemarkData >::const_iterator memberReferencesBegin() const;
+    QHash< int, OsmPlacemarkData >::const_iterator memberReferencesEnd() const;
+
     /**
      * @brief m_ndRefs is used to store a way's component nodes
      * ( It is empty for other placemark types )
@@ -232,15 +278,6 @@ private:
      *  order provided by polygon->innerBoundaries()
      */
     QHash<int, OsmPlacemarkData> m_memberReferences;
-
-    /**
-     * @brief m_relationReferences is used to store the relations the placemark is part of
-     * and the role it has within them.
-     * Eg. an entry ( "123", "stop" ) means that the parent placemark is a member of
-     * the relation with id "123", while having the "stop" role
-     */
-    QHash<OsmIdentifier, QString> m_relationReferences;
-
 };
 
 }
diff --git a/src/plugins/runner/osm/OsmWay.cpp b/src/plugins/runner/osm/OsmWay.cpp
index 0fa3395e79..8622fb45f1 100644
--- a/src/plugins/runner/osm/OsmWay.cpp
+++ b/src/plugins/runner/osm/OsmWay.cpp
@@ -254,8 +254,8 @@ QVector<GeoDataBuilding::NamedEntry> OsmWay::extractNamedEntries() const
 {
     QVector<GeoDataBuilding::NamedEntry> entries;
 
-    const auto end = m_osmData.nodeReferencesEnd();
-    for (auto iter = m_osmData.nodeReferencesBegin(); iter != end; ++iter) {
+    const auto end = m_osmData.hRef()->nodeReferencesEnd();
+    for (auto iter = m_osmData.hRef()->nodeReferencesBegin(); iter != end; ++iter) {
         const auto tagIter = iter.value().findTag(QStringLiteral("addr:housenumber"));
         if (tagIter != iter.value().tagsEnd()) {
             GeoDataBuilding::NamedEntry entry;
-- 
GitLab

