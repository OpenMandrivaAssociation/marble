From 0125b6824980c5e15846d9eb2d31e6e71248cf7d Mon Sep 17 00:00:00 2001
From: Gilles Caulier <caulier.gilles@gmail.com>
Date: Tue, 19 Sep 2023 10:19:00 +0200
Subject: [PATCH] qt6++

---
 PORT.QT6                          |  5 ++---
 tests/GeoDataLatLonAltBoxTest.cpp |  5 +++--
 tests/MarbleRunnerManagerTest.cpp |  2 +-
 tests/PositionTrackingTest.cpp    |  4 ++--
 tests/TestEquality.cpp            | 26 +++++++++++++-------------
 tests/TestGeoDataCoordinates.cpp  |  7 ++++---
 6 files changed, 25 insertions(+), 24 deletions(-)

diff --git a/PORT.QT6 b/PORT.QT6
index 4848777bc7..5c844d90a7 100644
--- a/PORT.QT6
+++ b/PORT.QT6
@@ -13,8 +13,7 @@ Qt5 support is dropped.
 Qt6Core5Compat still used.
 "PORT_QT6" annotation is used in source code when port to Qt6 needs to be double checked.
 KDE API based codes are disabled.
-Test codes not ported.
-Example codes not ported.
+Examples codes not ported.
 
 Screenshots:
 ------------
@@ -159,5 +158,5 @@ DIRECTORIES                                         STATUS
 │   │   │   └── yours                               DONE
 │   │   └── templates                               - Originally commented in CMakeLists.txt
 │   └── thumbnailer                                 DISABLED: KDE BASED
-├── tests                                           -
+├── tests                                           DONE
 └── tools                                           DONE
diff --git a/tests/GeoDataLatLonAltBoxTest.cpp b/tests/GeoDataLatLonAltBoxTest.cpp
index 8c6383bcf9..4c72ccd16b 100644
--- a/tests/GeoDataLatLonAltBoxTest.cpp
+++ b/tests/GeoDataLatLonAltBoxTest.cpp
@@ -4,6 +4,7 @@
 //
 
 #include <QObject>
+#include <QRandomGenerator>
 
 #include "GeoDataCoordinates.h"
 #include "GeoDataLinearRing.h"
@@ -56,7 +57,7 @@ void GeoDataLatLonAltBoxTest::fromLineStringTest()
 
 qreal GeoDataLatLonAltBoxTest::randomLon()
 {
-    qreal lon = qrand();
+    qreal lon = QRandomGenerator::global()->generate();
     while ( lon < -180 ) {
         lon += 360;
     }
@@ -69,7 +70,7 @@ qreal GeoDataLatLonAltBoxTest::randomLon()
 
 qreal GeoDataLatLonAltBoxTest::randomLat()
 {
-    qreal lat = qrand();
+    qreal lat = QRandomGenerator::global()->generate();
     while ( lat < -90 ) {
         lat += 180;
     }
diff --git a/tests/MarbleRunnerManagerTest.cpp b/tests/MarbleRunnerManagerTest.cpp
index 7db7734c18..06e902a7f0 100644
--- a/tests/MarbleRunnerManagerTest.cpp
+++ b/tests/MarbleRunnerManagerTest.cpp
@@ -229,7 +229,7 @@ void MarbleRunnerManagerTest::testSyncRouting()
     QCOMPARE( finishSpy.count(), 0 );
     QCOMPARE( resultSpy.count(), 0 );
 
-    QTime timer;
+    QElapsedTimer timer;
     timer.start();
     QVector<GeoDataDocument*> routes = m_runnerManager.searchRoute( &m_request );
 
diff --git a/tests/PositionTrackingTest.cpp b/tests/PositionTrackingTest.cpp
index 81311b1be5..6839bed5a0 100644
--- a/tests/PositionTrackingTest.cpp
+++ b/tests/PositionTrackingTest.cpp
@@ -173,7 +173,7 @@ void PositionTrackingTest::setPositionProviderPlugin()
     const GeoDataAccuracy accuracy( GeoDataAccuracy::Detailed, 10.0, 22.0 );
     const qreal speed = 32.8;
     const qreal direction = 49.7;
-    const QDateTime timestamp( QDate( 1, 3, 1994 ) );
+    const QDateTime timestamp( QDate( 1, 3, 1994 ), QTime() );
 
     GeoDataTreeModel treeModel;
     PositionTracking tracking( &treeModel );
@@ -204,7 +204,7 @@ void PositionTrackingTest::clearTrack()
     const GeoDataAccuracy accuracy( GeoDataAccuracy::Detailed, 10.0, 22.0 );
     const qreal speed = 32.8;
     const qreal direction = 49.7;
-    const QDateTime timestamp( QDate( 1, 3, 1994 ) );
+    const QDateTime timestamp( QDate( 1, 3, 1994 ), QTime() );
 
     GeoDataTreeModel treeModel;
     PositionTracking tracking( &treeModel );
diff --git a/tests/TestEquality.cpp b/tests/TestEquality.cpp
index 328b48ceaa..3303ccb2a2 100644
--- a/tests/TestEquality.cpp
+++ b/tests/TestEquality.cpp
@@ -346,7 +346,7 @@ void TestEquality::cameraTest()
 
 
     GeoDataTimeStamp timeStampBegin, timeStampEnd;
-    QDateTime date1( QDate(2014, 4, 7) );
+    QDateTime date1( QDate(2014, 4, 7), QTime() );
 
     timeStampBegin.setWhen( date1 );
     timeStampEnd.setWhen( date1 );
@@ -360,7 +360,7 @@ void TestEquality::cameraTest()
     timeSpan2.setEnd( timeStampEnd );
 
     GeoDataTimeStamp timeStamp1, timeStamp2;
-    QDateTime date2( QDate(2014, 4, 8) );
+    QDateTime date2( QDate(2014, 4, 8), QTime() );
     timeStamp1.setWhen( date2 );
     timeStamp2.setWhen( date2 );
     timeStamp1.setResolution( GeoDataTimeStamp::SecondResolution );
@@ -668,7 +668,7 @@ void TestEquality::tourTest()
 
 
     GeoDataTimeStamp timeStamp1, timeStamp2;
-    QDateTime date1( QDate(1994, 10, 4) );
+    QDateTime date1( QDate(1994, 10, 4), QTime() );
 
     timeStamp1.setWhen( date1 );
     timeStamp1.setResolution( GeoDataTimeStamp::YearResolution );
@@ -1105,7 +1105,7 @@ void TestEquality::timeSpanTest()
     GeoDataTimeSpan timeSpan1, timeSpan2;
     GeoDataTimeStamp timeStampBegin, timeStampEnd;
 
-    QDateTime date1( QDate(2014, 1, 10) ), date2( QDate(2014, 4, 21) );
+    QDateTime date1( QDate(2014, 1, 10), QTime() ), date2( QDate(2014, 4, 21), QTime() );
 
     timeStampBegin.setWhen( date1 );
     timeStampEnd.setWhen( date2 );
@@ -1135,7 +1135,7 @@ void TestEquality::timeSpanTest()
 void TestEquality::timeStampTest()
 {
     GeoDataTimeStamp timeStamp1, timeStamp2;
-    QDateTime date1( QDate(1994, 10, 4) ), date2( QDate(2070, 10, 4) );
+    QDateTime date1( QDate(1994, 10, 4), QTime() ), date2( QDate(2070, 10, 4), QTime() );
 
     timeStamp1.setWhen( date1 );
     timeStamp2.setWhen( date2 );
@@ -1916,8 +1916,8 @@ void TestEquality::modelTest()
 void TestEquality::trackTest()
 {
     GeoDataTrack track1, track2;
-    QDateTime date11( QDate(2000, 10, 4) ), date12( QDate(2001, 10, 4) );
-    QDateTime date21( QDate(2002, 10, 4) ), date22( QDate(2003, 10, 4) );
+    QDateTime date11( QDate(2000, 10, 4), QTime()), date12( QDate(2001, 10, 4), QTime() );
+    QDateTime date21( QDate(2002, 10, 4), QTime() ), date22( QDate(2003, 10, 4), QTime() );
     GeoDataCoordinates coord1(100, 100), coord2(200, 300), coord3(300, 300), coord4(400, 400);
     GeoDataExtendedData extendedData1, extendedData2;
     GeoDataData data1, data2;
@@ -1960,8 +1960,8 @@ void TestEquality::multiTrackTest()
 {
     GeoDataMultiTrack multiTrack1, multiTrack2;
     GeoDataTrack *track1, *track2, *track3, *track4;
-    QDateTime date11( QDate(2000, 10, 4) ), date12( QDate(2001, 10, 4) );
-    QDateTime date21( QDate(2002, 10, 4) ), date22( QDate(2003, 10, 4) );
+    QDateTime date11( QDate(2000, 10, 4), QTime() ), date12( QDate(2001, 10, 4), QTime() );
+    QDateTime date21( QDate(2002, 10, 4), QTime() ), date22( QDate(2003, 10, 4), QTime() );
     GeoDataCoordinates coord1(100, 100), coord2(200, 300), coord3(300, 300), coord4(400, 400);
     GeoDataExtendedData extendedData1, extendedData2;
     GeoDataData data1, data2;
@@ -2043,7 +2043,7 @@ void TestEquality::lookAtTest()
     lookAt2 = lookAt1;
 
     GeoDataTimeStamp timeStampBegin, timeStampEnd;
-    QDateTime date1( QDate(2014, 4, 7) );
+    QDateTime date1( QDate(2014, 4, 7), QTime() );
 
     timeStampBegin.setWhen( date1 );
     timeStampEnd.setWhen( date1 );
@@ -2056,7 +2056,7 @@ void TestEquality::lookAtTest()
     timeSpan2 = timeSpan1;
 
     GeoDataTimeStamp timeStamp1, timeStamp2;
-    QDateTime date2( QDate(2014, 4, 8) );
+    QDateTime date2( QDate(2014, 4, 8), QTime() );
     timeStamp1.setWhen( date2 );
     timeStamp2.setWhen( date2 );
     timeStamp1.setResolution( GeoDataTimeStamp::SecondResolution );
@@ -2168,7 +2168,7 @@ void TestEquality::networkLinkControlTest()
     netLC1.setLinkDescription( QString("Some link description here") );
     netLC1.setLinkSnippet( QString("Link snippet") );
     netLC1.setMaxLines( 100 );
-    netLC1.setExpires( QDateTime(QDate(2014, 5, 4)) );
+    netLC1.setExpires( QDateTime(QDate(2014, 5, 4), QTime() ));
     netLC2.setMinRefreshPeriod( 25 );
     netLC2.setMaxSessionLength( 100 );
     netLC2.setCookie( QString("Coookiiee") );
@@ -2177,7 +2177,7 @@ void TestEquality::networkLinkControlTest()
     netLC2.setLinkDescription( QString("Some link description here") );
     netLC2.setLinkSnippet( QString("Link snippet") );
     netLC2.setMaxLines( 100 );
-    netLC2.setExpires( QDateTime(QDate(2014, 5, 4)) );
+    netLC2.setExpires( QDateTime(QDate(2014, 5, 4), QTime() ));
 
     GeoDataUpdate update;
     update.setTargetHref( QString("Target href") );
diff --git a/tests/TestGeoDataCoordinates.cpp b/tests/TestGeoDataCoordinates.cpp
index 2bf59ac814..ea261fe48f 100644
--- a/tests/TestGeoDataCoordinates.cpp
+++ b/tests/TestGeoDataCoordinates.cpp
@@ -13,6 +13,7 @@
 #include <QDebug>
 #include <QTranslator>
 #include <QTemporaryFile>
+#include <QRandomGenerator>
 
 using namespace Marble;
 
@@ -70,7 +71,7 @@ void TestGeoDataCoordinates::initTestCase()
     QLocale::setDefault( QLocale::c() ); // needed for testing toString* conversions
 
     QTime time = QTime::currentTime();
-    qsrand((uint)time.msec());
+    QRandomGenerator::global()->seed((uint)time.msec());
 }
 
 /*
@@ -728,7 +729,7 @@ void TestGeoDataCoordinates::testFromStringDMS_data()
 void TestGeoDataCoordinates::testFromStringDMS()
 {
     // only run random 5% of all possible permutations
-    if ((qreal(qrand()) / RAND_MAX) > 0.05) {
+    if ((qreal( QRandomGenerator::global()->generate()) / RAND_MAX) > 0.05) {
         QSKIP("Not picked for this run.");
     }
 
@@ -857,7 +858,7 @@ void TestGeoDataCoordinates::testFromStringDM_data()
 void TestGeoDataCoordinates::testFromStringDM()
 {
     // only run random 5% of all possible permutations
-    if ((qreal(qrand()) / RAND_MAX) > 0.05) {
+    if ((qreal( QRandomGenerator::global()->generate()) / RAND_MAX) > 0.05) {
         QSKIP("Not picked for this run.");
     }
 
-- 
GitLab

